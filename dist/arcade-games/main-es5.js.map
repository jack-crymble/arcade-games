{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/common/common.data.ts","webpack:///src/app/common/services/direction.service.ts","webpack:///src/app/common/services/game.service.ts","webpack:///src/app/common/services/highscore.service.ts","webpack:///src/app/gameover-dialog/gameover-dialog.component.ts","webpack:///src/app/gameover-dialog/gameover-dialog.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/snake/snake.component.html","webpack:///src/app/snake/snake.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","SquareType","Game","Direction","DirectionService","VALID_KEY_CODES","keyDown$","document","pipe","event","indexOf","_direction","EAST","WEST","_pendingDirection","NORTH","SOUTH","resetDirection","keyDownSubscription","subscribe","unsubscribe","providedIn","GameService","width","board","Array","map","fill","type","EMPTY","JSON","parse","stringify","HighscoreService","game","score","highscores","getHighscores","push","localStorage","setItem","buildID","getItem","sort","a","b","slice","GameoverDialogComponent","dialogRef","data","highscoreService","save","close","HomeComponent","router","navigate","openGame","SnakeComponent","gameService","directionService","dialog","boardSize","bodyPositions","snakeLength","spaceToStart$","isPlaying","startGame","generateSquareBoard","init","destroy","headPosition","x","Math","floor","y","HEAD","addFoodToBoard","gameLoop","isFoodOnBoard","gameOverDialog","open","SNAKE","update","previousHeadPosition","currentDirection","hasSnakeHitBoundary","hasSnakeEatenSelf","endGame","foodPosition","eat","updateSquare","updateSnakeBody","sleep","random","FOOD","square","BODY","TAIL","length","removeTail","forEach","bodyPart","tail","splice","position","newType","ms","setTimeout","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { SnakeComponent } from './snake/snake.component';\n\n\nconst routes: Routes = [\n  { path: 'snake', component: SnakeComponent },\n  { path: 'home', component: HomeComponent },\n  { path: '**', component: HomeComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SnakeComponent } from './snake/snake.component';\nimport { HomeComponent } from './home/home.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { GameoverDialogComponent } from './gameover-dialog/gameover-dialog.component';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SnakeComponent,\n    HomeComponent,\n    GameoverDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatDialogModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export enum SquareType {\n  EMPTY = 'empty',\n  HEAD = 'head',\n  BODY = 'body',\n  TAIL = 'tail',\n  FOOD = 'food'\n};\n\nexport enum Game {\n  SNAKE = 'snake'\n};\n\nexport enum Direction {\n  NORTH = 'north',\n  EAST = 'east',\n  SOUTH = 'south',\n  WEST = 'west'\n};\n\nexport interface Square {\n  type: SquareType;\n};\n\nexport interface Position {\n  x: number;\n  y: number;\n};\n\nexport interface Highscore {\n  score: number;\n};\n","import { Injectable } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { Direction } from '../common.data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DirectionService {\n\n  private VALID_KEY_CODES = ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'];\n  private _direction: Direction;\n  private _pendingDirection: Direction;\n  private keyDownSubscription: Subscription;\n\n  get currentDirection(): Direction {\n    return this._direction;\n  }\n\n  keyDown$ = fromEvent(document, 'keydown').pipe(\n    filter((event: KeyboardEvent) => this.VALID_KEY_CODES.indexOf(event.code) > -1),\n    tap(event => {\n      if (event.code === 'ArrowUp' && (this._direction === Direction.EAST || this._direction === Direction.WEST)) {\n        this._pendingDirection = Direction.NORTH;\n      } else if (event.code === 'ArrowRight' && (this._direction === Direction.NORTH || this._direction === Direction.SOUTH)) {\n        this._pendingDirection = Direction.EAST;\n      } else if (event.code === 'ArrowDown' && (this._direction === Direction.EAST || this._direction === Direction.WEST)) {\n        this._pendingDirection = Direction.SOUTH;\n      } else if (event.code === 'ArrowLeft' && (this._direction === Direction.NORTH || this._direction === Direction.SOUTH)) {\n        this._pendingDirection = Direction.WEST;\n      }\n    })\n  );\n\n  init(): void {\n    this.resetDirection();\n    this.keyDownSubscription = this.keyDown$.subscribe();\n  }\n\n  update(): void {\n    this._direction = this._pendingDirection;\n  }\n\n  resetDirection(): void {\n    this._direction = this._pendingDirection = Direction.EAST;\n  }\n\n  destroy(): void {\n    this.keyDownSubscription?.unsubscribe();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Square, SquareType } from '../common.data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  generateSquareBoard(width: number): Square[][] {\n    let board = [...Array(width)].map(() => Array(width).fill({type: SquareType.EMPTY}));\n    board = JSON.parse(JSON.stringify(board));\n    return board;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Game, Highscore } from '../common.data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighscoreService {\n\n  save(game: Game, score: number): void {\n    let highscores: Highscore[] = this.getHighscores(game);\n    highscores.push({score: score});\n    localStorage.setItem(this.buildID(game), JSON.stringify(highscores));\n  }\n\n  getHighscores(game: Game): Highscore[] {\n    const highscores: Highscore[] = JSON.parse(localStorage.getItem(this.buildID(game))) || []\n    return highscores.sort((a, b) => b.score - a.score).slice(0, 5);\n  }\n\n  private buildID(game: Game): string {\n    return `${game}_v1`\n  }\n}\n","import { Component, Inject } from \"@angular/core\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Game, Highscore } from \"../common/common.data\";\nimport { HighscoreService } from \"../common/services/highscore.service\";\n\n@Component({\n  selector: 'app-gameover-dialog',\n  templateUrl: 'gameover-dialog.component.html',\n  styleUrls: ['./gameover-dialog.component.scss']\n})\nexport class GameoverDialogComponent {\n\n  highscores: Highscore[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<GameoverDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: {score: number, game: Game},\n    public highscoreService: HighscoreService\n  ) {\n    this.highscores = highscoreService.getHighscores(data.game);\n  }\n\n  save(): void {\n    this.highscoreService.save(this.data.game, this.data.score);\n    this.close();\n  }\n\n  close(): void {\n    this.dialogRef.close();\n  }\n}\n","<div class=\"sub-title\">\n  Your score was {{ data.score }}\n</div>\n\n<div class=\"highscores\">\n  <div class=\"title\">Previous Highscores</div>\n  <div *ngFor=\"let highscore of highscores; let i=index\" class=\"highscore\">\n    <span class=\"position\">{{i+1}}:</span>\n    <span class=\"score\">{{ highscore.score }}</span>\n  </div>\n</div>\n\n<div class=\"buttons\">\n  <button mat-raised-button cdkFocusInitial (click)=\"close()\">Close</button>\n  <button mat-raised-button color=\"primary\" (click)=\"save()\">Save score</button>\n</div>\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n\n  constructor(\n    private router: Router\n  ) {}\n\n  openGame(game: string): void {\n    this.router.navigate([game]);\n  }\n\n}\n","<div class=\"title\">\n  <span>Choose a game</span>\n</div>\n\n<div class=\"games\">\n  <button mat-raised-button color=\"primary\" (click)=\"openGame('snake')\">Snake 🐍</button>\n</div>\n","<ng-container *ngIf=\"spaceToStart$ | async\"></ng-container>\n\n<div class=\"title\">\n  <span>Snake!</span>\n</div>\n\n<div class=\"start\" [class.hidden]=\"isPlaying\">\n  Press space to begin...\n</div>\n\n<div class=\"score\">\n  <span>Score: {{ snakeLength - 1 }}</span>\n</div>\n\n<div class=\"board\">\n  <div *ngFor=\"let row of board; let i=index\" class=\"row\">\n    <ng-container *ngFor=\"let square of row; let j=index\">\n      <div class=\"square\" [ngClass]=\"{\n        'head': square.type === 'head',\n        'food': square.type === 'food',\n        'body': square.type === 'body',\n        'empty': square.type === 'empty'\n      }\">\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"buttons\">\n  <button mat-raised-button color=\"primary\" (click)=\"startGame()\" [disabled]=\"isPlaying\">Play!</button>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { fromEvent } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { Direction, Game, Position, Square, SquareType } from '../common/common.data';\nimport { DirectionService } from '../common/services/direction.service';\nimport { GameService } from '../common/services/game.service';\nimport { GameoverDialogComponent } from '../gameover-dialog/gameover-dialog.component';\n\n@Component({\n  selector: 'app-snake',\n  templateUrl: './snake.component.html',\n  styleUrls: ['./snake.component.scss']\n})\nexport class SnakeComponent implements OnInit, OnDestroy {\n  boardSize = 11;\n  board: Square[][];\n  headPosition: Position;\n  bodyPositions: Position[] = [];\n  snakeLength = 1;\n  isPlaying: boolean;\n  isFoodOnBoard: boolean;\n  foodPosition: Position;\n\n  spaceToStart$ = fromEvent(document, 'keydown').pipe(\n    filter((event: KeyboardEvent) => event.code === 'Space'),\n    filter(() => !this.isPlaying),\n    tap(() => this.startGame())\n  );\n\n  constructor(\n    private gameService: GameService,\n    private directionService: DirectionService,\n    private dialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.board = this.gameService.generateSquareBoard(this.boardSize);\n    this.directionService.init();\n  }\n\n  ngOnDestroy(): void {\n    this.directionService.destroy();\n  }\n\n  startGame(): void {\n    this.board = this.gameService.generateSquareBoard(this.boardSize);\n    this.headPosition = {x: Math.floor(this.boardSize / 2), y: Math.floor(this.boardSize / 2) };\n    this.board[this.headPosition.x][this.headPosition.y].type = SquareType.HEAD;\n    this.snakeLength = 1;\n    this.isPlaying = true;\n    this.addFoodToBoard();\n    this.gameLoop();\n  }\n\n  endGame(): void {\n    this.isPlaying = false;\n    this.isFoodOnBoard = false;\n    this.bodyPositions = [];\n    this.directionService.resetDirection();\n    this.gameOverDialog();\n  }\n\n  gameOverDialog(): void {\n    this.dialog.open(GameoverDialogComponent, {\n      data: {\n        score: this.snakeLength - 1,\n        game: Game.SNAKE\n      }\n    });\n  }\n\n  async gameLoop(): Promise<void> {\n    while (this.isPlaying) {\n      this.directionService.update();\n      const previousHeadPosition = JSON.parse(JSON.stringify(this.headPosition));\n\n      if (this.directionService.currentDirection === Direction.NORTH) {\n        this.headPosition.x -= 1;\n      } else if (this.directionService.currentDirection === Direction.EAST) {\n        this.headPosition.y += 1;\n      } else if (this.directionService.currentDirection === Direction.SOUTH) {\n        this.headPosition.x += 1;\n      } else if (this.directionService.currentDirection === Direction.WEST) {\n        this.headPosition.y -= 1;\n      }\n\n      if (this.hasSnakeHitBoundary() || this.hasSnakeEatenSelf()) {\n        this.endGame();\n        continue;\n      }\n\n      if (this.isFoodOnBoard) {\n        if (this.headPosition.x === this.foodPosition.x && this.headPosition.y === this.foodPosition.y) {\n          this.eat();\n        }\n      }\n\n      this.updateSquare(previousHeadPosition, SquareType.EMPTY);\n      this.updateSnakeBody(previousHeadPosition);\n      this.updateSquare(this.headPosition, SquareType.HEAD);\n\n      await this.sleep(300);\n    }\n  }\n\n  private addFoodToBoard(): void {\n    if (this.isFoodOnBoard) {\n      return;\n    }\n    while (!this.isFoodOnBoard) {\n      this.foodPosition = {\n        x: Math.floor(Math.random() * this.boardSize),\n        y: Math.floor(Math.random() * this.boardSize)\n      };\n      if (this.board[this.foodPosition.x][this.foodPosition.y].type === SquareType.EMPTY) {\n        this.isFoodOnBoard = true;\n      }\n    }\n    this.updateSquare(this.foodPosition, SquareType.FOOD);\n  }\n\n  private hasSnakeHitBoundary(): boolean {\n    return this.headPosition.x < 0\n      || this.headPosition.y < 0\n      || this.headPosition.x > this.boardSize - 1\n      || this.headPosition.y > this.boardSize - 1;\n  }\n\n  private hasSnakeEatenSelf(): boolean {\n    const square = this.board[this.headPosition.x][this.headPosition.y];\n    return square.type === SquareType.BODY || square.type === SquareType.TAIL;\n  }\n\n  private eat(): void {\n    this.snakeLength += 1;\n    this.isFoodOnBoard = false;\n    this.updateSquare(this.foodPosition, SquareType.EMPTY);\n    this.bodyPositions.push({x: this.foodPosition.x, y: this.foodPosition.y});\n    this.foodPosition.x = -1;\n    this.foodPosition.y = -1;\n    this.addFoodToBoard();\n  }\n\n  private updateSnakeBody(previousHeadPosition: Position): void {\n    if (this.bodyPositions.length > 0) {\n      this.removeTail();\n      this.bodyPositions = [{x: previousHeadPosition.x, y: previousHeadPosition.y}, ...this.bodyPositions];\n\n      this.bodyPositions.forEach(bodyPart => {\n        this.board[bodyPart.x][bodyPart.y].type = SquareType.BODY;\n      });\n    }\n  }\n\n  private removeTail(): void {\n    const tail = this.bodyPositions[this.bodyPositions.length - 1];\n    this.board[tail.x][tail.y].type = SquareType.EMPTY;\n    this.bodyPositions.splice(this.snakeLength - 2, 1);\n  }\n\n  private updateSquare(position: Position, newType: SquareType): void {\n    this.board[position.x][position.y].type = newType;\n  }\n\n  private sleep(ms: number = 1000): Promise<any> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}